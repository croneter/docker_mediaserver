version: '3.7'

services:
  # Our reverse-proxy: https://docs.traefik.io/
  traefik:
    image: traefik:v2.1.2
    container_name: traefik
    restart: always
    ports:
      # web
      - "80:80"
      # websecure
      - "443:443"
      # Plex
      - "${plex_advertise_port}:${plex_advertise_port}"  # Main Plex port
      # Do NOT forward these following ports on your router - they're LAN only
      - "1900:1900"  # for access to the Plex DLNA Server
      - "3005:3005"  # for controlling Plex Home Theater via Plex Companion
      # - "5353:5353/udp"  # for older Bonjour/Avahi network discovery)
      - "8324:8324"  # for controlling Plex for Roku via Plex Companion
      - "32410:32410"  # for current GDM network discovery
      - "32412:32412"  # for current GDM network discovery
      - "32413:32413"  # for current GDM network discovery
      - "32414:32414"  # for current GDM network discovery
      - "32469:32469"  # for access to the Plex DLNA Server
      # Only for development purposes! Traefik dashboard
      # - 8080:8080
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      # See https://go-acme.github.io/lego/dns/duckdns/ and
      # https://github.com/go-acme/lego/issues/967
      # API request timeout
      - "DUCKDNS_HTTP_TIMEOUT=30"
      # Maximum waiting time for DNS propagation
      - "DUCKDNS_PROPAGATION_TIMEOUT=600"
      # Time between DNS propagation check
      - "DUCKDNS_POLLING_INTERVAL=16"
      # The TTL of the TXT record used for the DNS challenge
      - "DUCKDNS_TTL=600"
    env_file:
      - "secrets/traefik-secrets.env"
    volumes:
      # List of username:password[hashed] for authentication
      - "./secrets/userlist.txt:/etc/traefik/userlist.txt:ro"
      # Safe SSL certificates by LetsEncrypt
      - "${config_dir}/letsencrypt:/letsencrypt"
      # So that Traefik can listen to the Docker events
      # Potential security risk, see https://github.com/containous/traefik/issues/4174
      - "/var/run/docker.sock:/var/run/docker.sock"
    command:
      # This is the "static traefik configuration"
      - "--log.level=WARN"
      # Enable docker as provider for traefik. Containers won't automatically connect
      - "--providers.docker.exposedbydefault=false"
      # don't listen in on us, traefik
      - "--global.sendanonymoususage=false"
      # Entrypoints to our infrastructure
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Plex entrypoints
      - "--entrypoints.plex0.address=:${plex_advertise_port}"  # Main Plex port
      - "--entrypoints.plex1.address=:1900"
      - "--entrypoints.plex2.address=:3005"
      - "--entrypoints.plex3.address=:8324"
      - "--entrypoints.plex4.address=:32410"
      - "--entrypoints.plex5.address=:32412"
      - "--entrypoints.plex6.address=:32413"
      - "--entrypoints.plex7.address=:32414"
      - "--entrypoints.plex8.address=:32469"
      # letsencrypt SSL certificates ("acme")
      - "--certificatesresolvers.ssl.acme.email=${letsencrypt_email}"
      - "--certificatesresolvers.ssl.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.ssl.acme.dnschallenge.provider=duckdns"
      # TODO: Comment this for production!
      - "--certificatesresolvers.ssl.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    labels:
      # This is the "dynamic traefik configuration" (part of it)
      - "traefik.enable=true"
      # global redirect to https
      - "traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.redirs.entrypoints=web"
      - "traefik.http.routers.redirs.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectScheme.scheme=https"
      # global wildcard certificates
      # See https://github.com/containous/traefik/issues/5317
      - "traefik.http.routers.wildcard-certs.entrypoints=websecure"
      - 'traefik.http.routers.wildcard-certs.tls.certresolver=ssl'
      - 'traefik.http.routers.wildcard-certs.tls.domains[0].main=${domain}'
      - 'traefik.http.routers.wildcard-certs.tls.domains[0].sans=*.${domain}'
      # Authentication
      - "traefik.http.middlewares.auth.basicAuth.usersFile=/etc/traefik/userlist.txt"
      # Enable SSO for Organizr - the username will be forwarded
      # See https://github.com/causefx/Organizr/issues/1215
      - "traefik.http.middlewares.auth.basicAuth.headerField=X-Forwarded-User"
  # heimdall:
  #   image: linuxserver/heimdall:latest
  #   container_name: heimdall
  #   restart: unless-stopped
  #   environment:
  #     - "PUID=${PUID}"
  #     - "PGID=${PGID}"
  #     - "TZ=${TZ}"
  #   volumes:
  #     - "${config_dir}/heimdall:/config"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.heimdall.rule=Host(`${domain}`)"
  #     - "traefik.http.routers.heimdall.tls=true"
  #     - "traefik.http.routers.heimdall.middlewares=auth"
  organizr:
    image: organizrtools/organizr-v2:latest
    container_name: organizr
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${config_dir}/organizr:/config"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.organizr.entrypoints=websecure'
      - "traefik.http.routers.organizr.rule=Host(`${domain}`)"
      # global wildcard certificates
      # See https://github.com/containous/traefik/issues/5317
      - "traefik.http.routers.organizr.tls=true"
      - "traefik.http.routers.organizr.middlewares=auth"
  plex:
    image: linuxserver/plex:latest
    container_name: plex
    restart: unless-stopped
    env_file:
      - "secrets/plex-secrets.env"
    environment:
      - "PLEX_UID=${PUID}"
      - "PLEX_GID=${PGID}"
      - "TZ=${TZ}"
      - "ADVERTISE_IP=http://${domain}:${plex_advertise_port}"
    volumes:
      - "${config_dir}/plex:/config"
      - "${movie_dir}:/movies"
      - "${show_dir}:/shows"
      - "${music_dir}:/music"
    labels:
      - "traefik.enable=true"
      # Main Plex port, remapped to port 32400
      - "traefik.tcp.routers.plex0.entrypoints=plex0"
      - "traefik.tcp.routers.plex0.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.plex0.tls.passthrough=true"
      - "traefik.tcp.services.plex0.loadbalancer.server.port=32400"
      # All the other Plex ports
      - "traefik.http.routers.plex1.entrypoints=plex1"
      - "traefik.http.routers.plex1.rule=Host(`*`)"
      - "traefik.http.routers.plex2.entrypoints=plex2"
      - "traefik.http.routers.plex2.rule=Host(`*`)"
      - "traefik.http.routers.plex3.entrypoints=plex3"
      - "traefik.http.routers.plex3.rule=Host(`*`)"
      - "traefik.http.routers.plex4.entrypoints=plex4"
      - "traefik.http.routers.plex4.rule=Host(`*`)"
      - "traefik.http.routers.plex5.entrypoints=plex5"
      - "traefik.http.routers.plex5.rule=Host(`*`)"
      - "traefik.http.routers.plex6.entrypoints=plex6"
      - "traefik.http.routers.plex6.rule=Host(`*`)"
      - "traefik.http.routers.plex7.entrypoints=plex7"
      - "traefik.http.routers.plex7.rule=Host(`*`)"
      - "traefik.http.routers.plex8.entrypoints=plex8"
      - "traefik.http.routers.plex8.rule=Host(`*`)"
  sabnzbd:
    image: linuxserver/sabnzbd:latest
    container_name: sabnzbd
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${config_dir}/sabnzbd:/config"
      - "${download_dir}/complete:/downloads"
      - "${download_dir}/incomplete-downloads:/incomplete-downloads"
      - "${download_dir}/watch:/watch"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.sabnzbd.entrypoints=websecure'
      - "traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.${domain}`)"
      - "traefik.http.routers.sabnzbd.tls=true"
      - "traefik.http.routers.sabnzbd.middlewares=auth"
      - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"
      # Enable iFrames in Organizr
      - "traefik.http.services.sabnzbd.loadbalancer.passHostHeader=true"
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${config_dir}/sonarr:/config"
      - "${download_dir}/complete:/downloads"
      - "${show_dir}:/tv"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.sonarr.entrypoints=websecure'
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${domain}`)"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.middlewares=auth"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      # Enable iFrames in Organizr
      - "traefik.http.services.sonarr.loadbalancer.passHostHeader=true"
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${config_dir}/radarr:/config"
      - "${download_dir}/complete:/downloads"
      - "${movie_dir}:/movies"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.radarr.entrypoints=websecure'
      - "traefik.http.routers.radarr.rule=Host(`radarr.${domain}`)"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.middlewares=auth"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
      # Enable iFrames in Organizr
      - "traefik.http.services.radarr.loadbalancer.passHostHeader=true"
  lidarr:
    image: linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${config_dir}/lidarr:/config"
      - "${music_dir}:/music"
      - "${download_dir}:/downloads"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.lidarr.entrypoints=websecure'
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.${domain}`)"
      - "traefik.http.routers.lidarr.tls=true"
      - "traefik.http.routers.lidarr.middlewares=auth"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"
      # Enable iFrames in Organizr
      - "traefik.http.services.lidarr.loadbalancer.passHostHeader=true"
  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${config_dir}/bazarr:/config"
      - "${movie_dir}:/movies"
      - "${show_dir}:/tv"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.bazarr.entrypoints=websecure'
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.${domain}`)"
      - "traefik.http.routers.bazarr.tls=true"
      - "traefik.http.routers.bazarr.middlewares=auth"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"
      # Enable iFrames in Organizr
      - "traefik.http.services.bazarr.loadbalancer.passHostHeader=true"
  hydra:
    image: linuxserver/hydra2:latest
    container_name: hydra
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${config_dir}/hydra2:/config"
      - "${download_dir}/watch:/downloads"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.hydra.entrypoints=websecure'
      - "traefik.http.routers.hydra.rule=Host(`hydra.${domain}`)"
      - "traefik.http.routers.hydra.tls=true"
      - "traefik.http.routers.hydra.middlewares=auth"
      - "traefik.http.services.hydra.loadbalancer.server.port=5076"
      # Enable iFrames in Organizr
      - "traefik.http.services.hydra.loadbalancer.passHostHeader=true"
  deluge:
    image: linuxserver/deluge:latest
    container_name: deluge
    restart: unless-stopped
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - "DELUGE_LOGLEVEL=error"
    volumes:
      - "${config_dir}/deluge:/config"
      - "${download_dir}/complete:/downloads"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.deluge.entrypoints=websecure'
      - "traefik.http.routers.deluge.rule=Host(`deluge.${domain}`)"
      - "traefik.http.routers.deluge.tls=true"
      - "traefik.http.routers.deluge.middlewares=auth"
      - "traefik.http.services.deluge.loadbalancer.server.port=8112"
      # Enable iFrames in Organizr
      - "traefik.http.services.deluge.loadbalancer.passHostHeader=true"
  portainer:
    image: portainer/portainer:1.23.0
    container_name: portainer
    restart: always
    environment:
      - "TZ=${TZ}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${config_dir}/portainer:/data"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.portainer.entrypoints=websecure'
      - "traefik.http.routers.portainer.rule=Host(`portainer.${domain}`)"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.middlewares=auth"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      # Enable iFrames in Organizr
      - "traefik.http.services.portainer.loadbalancer.passHostHeader=true"
    command:
      # portainer clashes with traefik basic auth's header "Authorization"
      # Plus we're using traefik for auth
      - "--no-auth"
  # TODO: check back once a Sonarr/Radarr integration exists
  # tdarr:
  #   # Post-Processing, health checks,   re-encoding, etc.
  #   image: haveagitgat/tdarr_aio:latest
  #   container_name: tdarr
  #   restart: unless-stopped
  #   environment:
  #     - "TZ=${TZ}"
  #     - "PUID=${PUID}"
  #     - "PGID=${PGID}"
  #   volumes:
  #     - "${config_dir}/tdarr:/var/lib/mongodb"
  #     - "${config_dir}/tdarr-cache:/cache"
  #     - "${movie_dir}:/home/Tdarr/Media/movies"
  #     - "${show_dir}:/home/Tdarr/Media/shows"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.tdarr.rule=Host(`tdarr.${domain}`)"
  #     - "traefik.http.routers.tdarr.tls=true"
  #     - "traefik.http.routers.tdarr.middlewares=auth"
  #     - "traefik.http.services.tdarr.loadbalancer.server.port=8265"
