version: '3.7'

services:
  # Our reverse-proxy: https://docs.traefik.io/
  traefik:
    image: traefik:v2.1.4
    container_name: traefik
    restart: always
    networks:
      - traefik
    ports:
      # web
      - "80:80"
      # websecure
      - "443:443"
      # Plex
      - "${PLEX_ADVERTISE_PORT}:${PLEX_ADVERTISE_PORT}"  # Main Plex port
      # Do NOT forward these following ports on your router - they're LAN only
      - "1900:1900"  # for access to the Plex DLNA Server
      - "3005:3005"  # for controlling Plex Home Theater via Plex Companion
      # - "5353:5353/udp"  # for older Bonjour/Avahi network discovery)
      - "8324:8324"  # for controlling Plex for Roku via Plex Companion
      - "32410:32410"  # for current GDM network discovery
      - "32412:32412"  # for current GDM network discovery
      - "32413:32413"  # for current GDM network discovery
      - "32414:32414"  # for current GDM network discovery
      - "32469:32469"  # for access to the Plex DLNA Server
      # Only for development purposes! Traefik dashboard
      # - 8080:8080
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      # See https://go-acme.github.io/lego/dns/duckdns/ and
      # https://github.com/go-acme/lego/issues/967
      # API request timeout
      - "DUCKDNS_HTTP_TIMEOUT=30"
      # Maximum waiting time for DNS propagation
      - "DUCKDNS_PROPAGATION_TIMEOUT=600"
      # Time between DNS propagation check
      - "DUCKDNS_POLLING_INTERVAL=16"
      # The TTL of the TXT record used for the DNS challenge
      - "DUCKDNS_TTL=600"
      # Link environment variable with secrets file
      - "DUCKDNS_TOKEN=${DUCKDNS_TOKEN}"
    volumes:
      # Safe SSL certificates by LetsEncrypt
      - "${CONFIG_DIR}/letsencrypt:/letsencrypt"
      # So that Traefik can listen to the Docker events
      # Potential security risk, see https://github.com/containous/traefik/issues/4174
      - "/var/run/docker.sock:/var/run/docker.sock"
    command:
      # This is the "static traefik configuration"
      - "--log.level=INFO"  # Possible values: DEBUG, INFO, WARN, ERROR
      # Enable docker as provider for traefik. Containers won't automatically connect
      - "--providers.docker.exposedbydefault=false"
      # don't listen in on us, traefik
      - "--global.sendanonymoususage=false"
      # Entrypoints to our infrastructure
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Plex entrypoints
      - "--entrypoints.plex0.address=:${PLEX_ADVERTISE_PORT}"  # Main Plex port
      - "--entrypoints.plex1.address=:1900"
      - "--entrypoints.plex2.address=:3005"
      - "--entrypoints.plex3.address=:8324"
      - "--entrypoints.plex4.address=:32410"
      - "--entrypoints.plex5.address=:32412"
      - "--entrypoints.plex6.address=:32413"
      - "--entrypoints.plex7.address=:32414"
      - "--entrypoints.plex8.address=:32469"
      # letsencrypt SSL certificates ("acme")
      - "--certificatesresolvers.ssl.acme.email=${LETSENCRYPT_EMAIL}"
      - "--certificatesresolvers.ssl.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.ssl.acme.dnschallenge.provider=duckdns"
      # When testing, uncomment this. Letsencrypt only allows a limited number of
      # requests for certificates
      # - "--certificatesresolvers.ssl.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    labels:
      # This is the "dynamic traefik configuration" (part of it)
      - "traefik.enable=true"
      # global redirect to https
      - "traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.redirs.entrypoints=web"
      - "traefik.http.routers.redirs.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectScheme.scheme=https"
      # global wildcard certificates
      # See https://github.com/containous/traefik/issues/5317
      - "traefik.http.routers.wildcard-certs.entrypoints=websecure"
      - 'traefik.http.routers.wildcard-certs.tls.certresolver=ssl'
      - 'traefik.http.routers.wildcard-certs.tls.domains[0].main=${DOMAIN}'
      - 'traefik.http.routers.wildcard-certs.tls.domains[0].sans=*.${DOMAIN}'
      # Authentication done by our Keycloak container
      - "traefik.http.middlewares.auth.forwardauth.address=http://forward-auth:4181"
      - "traefik.http.middlewares.auth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.auth.forwardauth.authResponseHeaders=X-Forwarded-User"
  keycloak_db:
    # Store usernames, passwords, keycloak settings
    image: postgres:12.1-alpine
    container_name: keycloak_db
    restart: unless-stopped
    networks:
      - keycloak
    volumes:
      - "${CONFIG_DIR}/keycloak_db:/var/lib/postgresql/data"
    environment:
      - "POSTGRES_DB=keycloak"
      - "POSTGRES_USER=keycloak"
      - "POSTGRES_PASSWORD=password"
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
  keycloak:
    image: jboss/keycloak:latest
    container_name: keycloak
    restart: unless-stopped
    networks:
      - traefik
      - keycloak
    secrets:
      - keycloak
    environment:
      - "DB_VENDOR=POSTGRES"
      - "DB_ADDR=keycloak_db"
      - "DB_PORT=5432"
      - "DB_DATABASE=keycloak"
      - "DB_USER=keycloak"
      - "DB_SCHEMA=public"
      - "DB_PASSWORD=password"
      - "KEYCLOAK_USER=${KEYCLOAK_ADMIN_USERNAME}"
      - "KEYCLOAK_PASSWORD_FILE=/run/secrets/keycloak"
      - "PROXY_ADDRESS_FORWARDING=true"
      - "KEYCLOAK_LOGLEVEL=INFO"  # Possible values: DEBUG, INFO, WARN, ERROR
      # not working yet
      # - "KEYCLOAK_FRONTEND_URL=keycloak.${DOMAIN}"
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    depends_on:
      - keycloak_db
    labels:
      - "traefik.enable=true"
      # BEWARE: add the project to the network name!
      - "traefik.docker.network=docker-mediaserver_traefik"
      - 'traefik.http.routers.keycloak.entrypoints=websecure'
      - "traefik.http.routers.keycloak.rule=Host(`keycloak.${DOMAIN}`)"
      - "traefik.http.routers.keycloak.tls=true"
      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"
  forward-auth:
    image: thomseddon/traefik-forward-auth:2.1
    container_name: forward-auth
    restart: unless-stopped
    networks:
      - traefik
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - "LOG_LEVEL=INFO"  # Possible values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL
      - "DEFAULT_PROVIDER=oidc"
      - "PROVIDERS_OIDC_CLIENT_ID=${KEYCLOAK_CLIENT_ID}"
      - "PROVIDERS_OIDC_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}"
      - "PROVIDERS_OIDC_ISSUER_URL=https://keycloak.${DOMAIN}/auth/realms/${KEYCLOAK_REALM}"
      - "SECRET=${COOKIE_SECRET}"
      - "COOKIE_DOMAIN=${DOMAIN}"
      - "AUTH_HOST=auth.${DOMAIN}"
    depends_on:
      - traefik
      - keycloak
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.forward-auth.entrypoints=websecure"
      - "traefik.http.routers.forward-auth.rule=Host(`auth.${DOMAIN}`)"
      - "traefik.http.routers.forward-auth.tls=true"
      - "traefik.http.routers.forward-auth.middlewares=auth"
      - "traefik.http.services.forward-auth.loadbalancer.server.port=4181"
  ########################
  # ACTUAL SERVICES
  ########################
  organizr:
    image: organizrtools/organizr-v2:latest
    container_name: organizr
    restart: unless-stopped
    networks:
      - traefik
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${CONFIG_DIR}/organizr:/config"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.organizr.entrypoints=websecure'
      - "traefik.http.routers.organizr.rule=Host(`${DOMAIN}`)"
      # global wildcard certificates
      # See https://github.com/containous/traefik/issues/5317
      - "traefik.http.routers.organizr.tls=true"
      - "traefik.http.routers.organizr.middlewares=auth"
  plex:
    image: linuxserver/plex:latest
    container_name: plex
    restart: unless-stopped
    networks:
      - traefik
    secrets:
      - "plex_claim"
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - "ADVERTISE_IP=http://${DOMAIN}:${PLEX_ADVERTISE_PORT}"
      # Link environment variable with secrets file
      - "PLEX_CLAIM_FILE='/run/secrets/plex_claim'"
    volumes:
      - "${CONFIG_DIR}/plex:/config"
      - "${MOVIE_DIR}:/movies"
      - "${SHOW_DIR}:/shows"
      - "${MUSIC_DIR}:/music"
    labels:
      - "traefik.enable=true"
      # Main Plex port, remapped to port 32400
      - "traefik.tcp.routers.plex0.entrypoints=plex0"
      - "traefik.tcp.routers.plex0.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.plex0.tls.passthrough=true"
      - "traefik.tcp.services.plex0.loadbalancer.server.port=32400"
      # All the other Plex ports
      - "traefik.http.routers.plex1.entrypoints=plex1"
      - "traefik.http.routers.plex1.rule=Host(`*`)"
      - "traefik.http.routers.plex2.entrypoints=plex2"
      - "traefik.http.routers.plex2.rule=Host(`*`)"
      - "traefik.http.routers.plex3.entrypoints=plex3"
      - "traefik.http.routers.plex3.rule=Host(`*`)"
      - "traefik.http.routers.plex4.entrypoints=plex4"
      - "traefik.http.routers.plex4.rule=Host(`*`)"
      - "traefik.http.routers.plex5.entrypoints=plex5"
      - "traefik.http.routers.plex5.rule=Host(`*`)"
      - "traefik.http.routers.plex6.entrypoints=plex6"
      - "traefik.http.routers.plex6.rule=Host(`*`)"
      - "traefik.http.routers.plex7.entrypoints=plex7"
      - "traefik.http.routers.plex7.rule=Host(`*`)"
      - "traefik.http.routers.plex8.entrypoints=plex8"
      - "traefik.http.routers.plex8.rule=Host(`*`)"
  sabnzbd:
    image: linuxserver/sabnzbd:latest
    container_name: sabnzbd
    restart: unless-stopped
    networks:
      - traefik
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${CONFIG_DIR}/sabnzbd:/config"
      - "${DOWNLOAD_DIR}/complete:/downloads"
      - "${DOWNLOAD_DIR}/incomplete-downloads:/incomplete-downloads"
      - "${DOWNLOAD_DIR}/watch:/watch"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.sabnzbd.entrypoints=websecure'
      - "traefik.http.routers.sabnzbd.rule=Host(`sabnzbd.${DOMAIN}`)"
      - "traefik.http.routers.sabnzbd.tls=true"
      - "traefik.http.routers.sabnzbd.middlewares=auth"
      - "traefik.http.services.sabnzbd.loadbalancer.server.port=8080"
      # Enable iFrames in Organizr
      - "traefik.http.services.sabnzbd.loadbalancer.passHostHeader=true"
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    networks:
      - traefik
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${CONFIG_DIR}/sonarr:/config"
      - "${DOWNLOAD_DIR}/complete:/downloads"
      - "${SHOW_DIR}:/tv"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.sonarr.entrypoints=websecure'
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAIN}`)"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.middlewares=auth"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
      # Enable iFrames in Organizr
      - "traefik.http.services.sonarr.loadbalancer.passHostHeader=true"
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    networks:
      - traefik
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${CONFIG_DIR}/radarr:/config"
      - "${DOWNLOAD_DIR}/complete:/downloads"
      - "${MOVIE_DIR}:/movies"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.radarr.entrypoints=websecure'
      - "traefik.http.routers.radarr.rule=Host(`radarr.${DOMAIN}`)"
      - "traefik.http.routers.radarr.tls=true"
      - "traefik.http.routers.radarr.middlewares=auth"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"
      # Enable iFrames in Organizr
      - "traefik.http.services.radarr.loadbalancer.passHostHeader=true"
  lidarr:
    image: linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    networks:
      - traefik
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${CONFIG_DIR}/lidarr:/config"
      - "${MUSIC_DIR}:/music"
      - "${DOWNLOAD_DIR}:/downloads"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.lidarr.entrypoints=websecure'
      - "traefik.http.routers.lidarr.rule=Host(`lidarr.${DOMAIN}`)"
      - "traefik.http.routers.lidarr.tls=true"
      - "traefik.http.routers.lidarr.middlewares=auth"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"
      # Enable iFrames in Organizr
      - "traefik.http.services.lidarr.loadbalancer.passHostHeader=true"
  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    networks:
      - traefik
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${CONFIG_DIR}/bazarr:/config"
      - "${MOVIE_DIR}:/movies"
      - "${SHOW_DIR}:/tv"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.bazarr.entrypoints=websecure'
      - "traefik.http.routers.bazarr.rule=Host(`bazarr.${DOMAIN}`)"
      - "traefik.http.routers.bazarr.tls=true"
      - "traefik.http.routers.bazarr.middlewares=auth"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"
      # Enable iFrames in Organizr
      - "traefik.http.services.bazarr.loadbalancer.passHostHeader=true"
  hydra:
    image: linuxserver/hydra2:latest
    container_name: hydra
    restart: unless-stopped
    networks:
      - traefik
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
    volumes:
      - "${CONFIG_DIR}/hydra2:/config"
      - "${DOWNLOAD_DIR}/watch:/downloads"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.hydra.entrypoints=websecure'
      - "traefik.http.routers.hydra.rule=Host(`hydra.${DOMAIN}`)"
      - "traefik.http.routers.hydra.tls=true"
      - "traefik.http.routers.hydra.middlewares=auth"
      - "traefik.http.services.hydra.loadbalancer.server.port=5076"
      # Enable iFrames in Organizr
      - "traefik.http.services.hydra.loadbalancer.passHostHeader=true"
  deluge:
    image: linuxserver/deluge:latest
    container_name: deluge
    restart: unless-stopped
    networks:
      - traefik
    environment:
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "TZ=${TZ}"
      - "DELUGE_LOGLEVEL=INFO"
    volumes:
      - "${CONFIG_DIR}/deluge:/config"
      - "${DOWNLOAD_DIR}/complete:/downloads"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.deluge.entrypoints=websecure'
      - "traefik.http.routers.deluge.rule=Host(`deluge.${DOMAIN}`)"
      - "traefik.http.routers.deluge.tls=true"
      - "traefik.http.routers.deluge.middlewares=auth"
      - "traefik.http.services.deluge.loadbalancer.server.port=8112"
      # Enable iFrames in Organizr
      - "traefik.http.services.deluge.loadbalancer.passHostHeader=true"
  portainer:
    image: portainer/portainer:1.23.0
    container_name: portainer
    restart: always
    networks:
      - traefik
    environment:
      - "TZ=${TZ}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "${CONFIG_DIR}/portainer:/data"
    labels:
      - "traefik.enable=true"
      - 'traefik.http.routers.portainer.entrypoints=websecure'
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.middlewares=auth"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
      # Enable iFrames in Organizr
      - "traefik.http.services.portainer.loadbalancer.passHostHeader=true"
    command:
      # portainer clashes with traefik basic auth's header "Authorization"
      # Plus we're using traefik for auth
      - "--no-auth"
  # TODO: check back once a Sonarr/Radarr integration exists
  # tdarr:
  #   # Post-Processing, health checks,   re-encoding, etc.
  #   image: haveagitgat/tdarr_aio:latest
  #   container_name: tdarr
  #   restart: unless-stopped
  #   environment:
  #     - "TZ=${TZ}"
  #     - "PUID=${PUID}"
  #     - "PGID=${PGID}"
  #   volumes:
  #     - "${CONFIG_DIR}/tdarr:/var/lib/mongodb"
  #     - "${CONFIG_DIR}/tdarr-cache:/cache"
  #     - "${MOVIE_DIR}:/home/Tdarr/Media/movies"
  #     - "${SHOW_DIR}:/home/Tdarr/Media/shows"
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.tdarr.rule=Host(`tdarr.${DOMAIN}`)"
  #     - "traefik.http.routers.tdarr.tls=true"
  #     - "traefik.http.routers.tdarr.middlewares=auth"
  #     - "traefik.http.services.tdarr.loadbalancer.server.port=8265"

secrets:
  plex_claim:
    file: "./secrets/plex_claim.txt"
  keycloak:
    file: "./secrets/keycload_admin_pwd.txt"

networks:
  keycloak:
  traefik:
