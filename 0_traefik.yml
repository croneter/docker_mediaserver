version: "3.7"

services:
  traefik:
    image: traefik:v2.1.6
    container_name: traefik
    restart: always
    networks:
      - traefik
    ports:
      # web
      - 80:80
      # websecure
      - 443:443
      # Plex
      - ${PLEX_ADVERTISE_PORT}:${PLEX_ADVERTISE_PORT}  # Main Plex port
      # Todo: route Pihole once traefik handels udp
      # - 53:53/udp
      # - 53:53/tcp
      # - '67:67/udp'  # Needed for pihole DHCP server
      - 8182:8182
      - 8183:8183
      # Only for development purposes! Traefik dashboard
      # - 8080:8080
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      # See https://go-acme.github.io/lego/dns/duckdns/ and
      # https://github.com/go-acme/lego/issues/967
      # API request timeout
      - DUCKDNS_HTTP_TIMEOUT=30
      # Maximum waiting time for DNS propagation
      - DUCKDNS_PROPAGATION_TIMEOUT=600
      # Time between DNS propagation check
      - DUCKDNS_POLLING_INTERVAL=16
      # The TTL of the TXT record used for the DNS challenge
      - DUCKDNS_TTL=600
      # Link environment variable with secrets file
      - DUCKDNS_TOKEN=${DUCKDNS_TOKEN}
    volumes:
      # Safe SSL certificates by LetsEncrypt
      - "${CONFIG_DIR}/letsencrypt:/letsencrypt"
      # So that Traefik can listen to the Docker events
      # Potential security risk, see https://github.com/containous/traefik/issues/4174
      - /var/run/docker.sock:/var/run/docker.sock
    command:
      # This is the static traefik configuration
      - --log.level=INFO  # Possible values: DEBUG, INFO, WARN, ERROR
      - --api.dashboard=true
      # Enable docker as provider for traefik. Containers won't automatically connect
      - --providers.docker.exposedbydefault=false
      # don't listen in on us, traefik
      - --global.sendanonymoususage=false
      # Entrypoints to our infrastructure
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Main Plex port
      - --entrypoints.plex.address=:${PLEX_ADVERTISE_PORT}
      # Pihole
      # - --entrypoints.pihole0.address=:53
      - --entrypoints.pihole1.address=:8182
      - --entrypoints.pihole2.address=:8183
      # letsencrypt SSL certificates (acme)
      - --certificatesresolvers.ssl.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.ssl.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.ssl.acme.dnschallenge.provider=duckdns
      # When testing, uncomment this. Letsencrypt only allows a limited number of
      # requests for certificates
      # - --certificatesresolvers.ssl.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
    labels:
      # This is the dynamic traefik configuration (part of it)
      - traefik.enable=true
      # Traefik dashboard
      - traefik.http.routers.api.entrypoints=websecure
      - traefik.http.routers.api.rule=Host(`traefik.${DOMAIN}`)
      - traefik.http.routers.api.tls=true
      - traefik.http.routers.api.middlewares=auth
      - traefik.http.routers.api.service=api@internal
      # global redirect to https
      - traefik.http.routers.redirs.rule=hostregexp(`{host:.+}`)
      - traefik.http.routers.redirs.entrypoints=web
      - traefik.http.routers.redirs.middlewares=redirect-to-https
      - traefik.http.middlewares.redirect-to-https.redirectScheme.scheme=https
      # global wildcard certificates
      # See https://github.com/containous/traefik/issues/5317
      - traefik.http.routers.wildcard-certs.entrypoints=websecure
      - traefik.http.routers.wildcard-certs.tls.certresolver=ssl
      - traefik.http.routers.wildcard-certs.tls.domains[0].main=${DOMAIN}
      - traefik.http.routers.wildcard-certs.tls.domains[0].sans=*.${DOMAIN}
      # Authentication done by our Keycloak container
      - traefik.http.middlewares.auth.forwardauth.address=http://forward-auth:4181
      - traefik.http.middlewares.auth.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.auth.forwardauth.authResponseHeaders=X-Forwarded-User
  keycloak_db:
    # Store usernames, passwords, keycloak settings
    image: postgres:12.1-alpine
    container_name: keycloak_db
    restart: unless-stopped
    networks:
      - keycloak
    volumes:
      - ${CONFIG_DIR}/keycloak_db:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=keycloak
      - POSTGRES_USER=keycloak
      - POSTGRES_PASSWORD=password
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
  keycloak:
    image: jboss/keycloak:latest
    container_name: keycloak
    restart: unless-stopped
    networks:
      - traefik
      - keycloak
    secrets:
      - keycloak
    environment:
      - DB_VENDOR=POSTGRES
      - DB_ADDR=keycloak_db
      - DB_PORT=5432
      - DB_DATABASE=keycloak
      - DB_USER=keycloak
      - DB_SCHEMA=public
      - DB_PASSWORD=password
      - KEYCLOAK_USER=${KEYCLOAK_ADMIN_USERNAME}
      - KEYCLOAK_PASSWORD_FILE=/run/secrets/keycloak
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_LOGLEVEL=INFO  # Possible values: DEBUG, INFO, WARN, ERROR
      # not working yet
      # - KEYCLOAK_FRONTEND_URL=keycloak.${DOMAIN}
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    depends_on:
      - keycloak_db
    labels:
      - traefik.enable=true
      # BEWARE: add the project to the network name!
      - traefik.docker.network=docker-mediaserver_traefik
      - traefik.http.routers.keycloak.entrypoints=websecure
      - traefik.http.routers.keycloak.rule=Host(`keycloak.${DOMAIN}`)
      - traefik.http.routers.keycloak.tls=true
      - traefik.http.services.keycloak.loadbalancer.server.port=8080
  forward-auth:
    image: thomseddon/traefik-forward-auth:2.1
    container_name: forward-auth
    restart: unless-stopped
    networks:
      - traefik
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - LOG_LEVEL=INFO  # Possible values: TRACE, DEBUG, INFO, WARN, ERROR, FATAL
      - DEFAULT_PROVIDER=oidc
      - PROVIDERS_OIDC_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
      - PROVIDERS_OIDC_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
      - PROVIDERS_OIDC_ISSUER_URL=https://keycloak.${DOMAIN}/auth/realms/${KEYCLOAK_REALM}
      - SECRET=${COOKIE_SECRET}
      - COOKIE_DOMAIN=${DOMAIN}
      - AUTH_HOST=auth.${DOMAIN}
      # Lifetime of the cookie in seconds, 30 days
      - LIFETIME=2592000
    depends_on:
      - traefik
      - keycloak
    labels:
      - traefik.enable=true
      - traefik.http.routers.forward-auth.entrypoints=websecure
      - traefik.http.routers.forward-auth.rule=Host(`auth.${DOMAIN}`)
      - traefik.http.routers.forward-auth.tls=true
      - traefik.http.routers.forward-auth.middlewares=auth
      - traefik.http.services.forward-auth.loadbalancer.server.port=4181

secrets:
  keycloak:
    file: "./secrets/keycloak_admin_pwd.txt"

networks:
  keycloak:
  traefik:
    external: true
